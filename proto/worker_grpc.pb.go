// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package distributed_grep

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrepTaskClient is the client API for GrepTask service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrepTaskClient interface {
	Map(ctx context.Context, in *GrepInput, opts ...grpc.CallOption) (*GrepOutput, error)
	Reduce(ctx context.Context, in *GrepInput, opts ...grpc.CallOption) (*GrepOutput, error)
}

type grepTaskClient struct {
	cc grpc.ClientConnInterface
}

func NewGrepTaskClient(cc grpc.ClientConnInterface) GrepTaskClient {
	return &grepTaskClient{cc}
}

func (c *grepTaskClient) Map(ctx context.Context, in *GrepInput, opts ...grpc.CallOption) (*GrepOutput, error) {
	out := new(GrepOutput)
	err := c.cc.Invoke(ctx, "/proto.GrepTask/Map", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *grepTaskClient) Reduce(ctx context.Context, in *GrepInput, opts ...grpc.CallOption) (*GrepOutput, error) {
	out := new(GrepOutput)
	err := c.cc.Invoke(ctx, "/proto.GrepTask/Reduce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GrepTaskServer is the server API for GrepTask service.
// All implementations must embed UnimplementedGrepTaskServer
// for forward compatibility
type GrepTaskServer interface {
	Map(context.Context, *GrepInput) (*GrepOutput, error)
	Reduce(context.Context, *GrepInput) (*GrepOutput, error)
	mustEmbedUnimplementedGrepTaskServer()
}

// UnimplementedGrepTaskServer must be embedded to have forward compatible implementations.
type UnimplementedGrepTaskServer struct {
}

func (UnimplementedGrepTaskServer) Map(context.Context, *GrepInput) (*GrepOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Map not implemented")
}
func (UnimplementedGrepTaskServer) Reduce(context.Context, *GrepInput) (*GrepOutput, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reduce not implemented")
}
func (UnimplementedGrepTaskServer) mustEmbedUnimplementedGrepTaskServer() {}

// UnsafeGrepTaskServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrepTaskServer will
// result in compilation errors.
type UnsafeGrepTaskServer interface {
	mustEmbedUnimplementedGrepTaskServer()
}

func RegisterGrepTaskServer(s grpc.ServiceRegistrar, srv GrepTaskServer) {
	s.RegisterService(&GrepTask_ServiceDesc, srv)
}

func _GrepTask_Map_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrepInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrepTaskServer).Map(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GrepTask/Map",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrepTaskServer).Map(ctx, req.(*GrepInput))
	}
	return interceptor(ctx, in, info, handler)
}

func _GrepTask_Reduce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrepInput)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GrepTaskServer).Reduce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GrepTask/Reduce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GrepTaskServer).Reduce(ctx, req.(*GrepInput))
	}
	return interceptor(ctx, in, info, handler)
}

// GrepTask_ServiceDesc is the grpc.ServiceDesc for GrepTask service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrepTask_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GrepTask",
	HandlerType: (*GrepTaskServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Map",
			Handler:    _GrepTask_Map_Handler,
		},
		{
			MethodName: "Reduce",
			Handler:    _GrepTask_Reduce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/worker.proto",
}

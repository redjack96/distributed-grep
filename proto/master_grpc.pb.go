// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package distributed_grep

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GoGrepClient is the client API for GoGrep service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GoGrepClient interface {
	DistributedGrep(ctx context.Context, in *GrepRequest, opts ...grpc.CallOption) (*GrepResult, error)
}

type goGrepClient struct {
	cc grpc.ClientConnInterface
}

func NewGoGrepClient(cc grpc.ClientConnInterface) GoGrepClient {
	return &goGrepClient{cc}
}

func (c *goGrepClient) DistributedGrep(ctx context.Context, in *GrepRequest, opts ...grpc.CallOption) (*GrepResult, error) {
	out := new(GrepResult)
	err := c.cc.Invoke(ctx, "/proto.GoGrep/DistributedGrep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GoGrepServer is the server API for GoGrep service.
// All implementations must embed UnimplementedGoGrepServer
// for forward compatibility
type GoGrepServer interface {
	DistributedGrep(context.Context, *GrepRequest) (*GrepResult, error)
	mustEmbedUnimplementedGoGrepServer()
}

// UnimplementedGoGrepServer must be embedded to have forward compatible implementations.
type UnimplementedGoGrepServer struct {
}

func (UnimplementedGoGrepServer) DistributedGrep(context.Context, *GrepRequest) (*GrepResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistributedGrep not implemented")
}
func (UnimplementedGoGrepServer) mustEmbedUnimplementedGoGrepServer() {}

// UnsafeGoGrepServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GoGrepServer will
// result in compilation errors.
type UnsafeGoGrepServer interface {
	mustEmbedUnimplementedGoGrepServer()
}

func RegisterGoGrepServer(s grpc.ServiceRegistrar, srv GoGrepServer) {
	s.RegisterService(&GoGrep_ServiceDesc, srv)
}

func _GoGrep_DistributedGrep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GoGrepServer).DistributedGrep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.GoGrep/DistributedGrep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GoGrepServer).DistributedGrep(ctx, req.(*GrepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GoGrep_ServiceDesc is the grpc.ServiceDesc for GoGrep service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GoGrep_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GoGrep",
	HandlerType: (*GoGrepServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DistributedGrep",
			Handler:    _GoGrep_DistributedGrep_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/master.proto",
}
